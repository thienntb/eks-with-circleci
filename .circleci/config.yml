version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  aws-ecr: circleci/aws-ecr@8.1.3
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  linting:
    docker:
      - image: python:3.9-slim
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  security-check:
    docker:
      - image: python:3.9-slim
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make security

  deploy-application:
    docker:
      - image: cimg/python:3.9
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Create deployment manifest
          command: |
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat deployment/hello-world-deployment.yaml |\
               sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|\
                g;s|BUILD_DATE_VALUE|$BUILD_DATE|g;s|VERSION_INFO_VALUE|\
                << parameters.version-info >>|g" > deployment/hello-world-deployment.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/hello-world-deployment.yaml"
          get-rollout-status: true
          resource-name: deployment/hello-world-deployment
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/hello-world-service.yaml"

  test-application:
    docker:
      - image: cimg/python:3.9
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
            sleep 30
            for attempt in {1..20}; do
              EXTERNAL_IP=$(kubectl get service hello-world-service | awk '{print $4}' | tail -n1)
              echo "Checking external IP: ${EXTERNAL_IP}"
              if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
                break
              fi
              echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
              sleep 10
            done
            sleep 180
            export API_URL="http://$EXTERNAL_IP"
            echo "API_URL = ${API_URL}"
            curl -s --retry 10 "http://$EXTERNAL_IP" | grep "Hello World"

workflows:
  deployment:
    jobs:
      - aws-ecr/build-and-push-image:
          name: build-and-push-image
          registry-id: AWS_ECR_REGISTRY_ID
          region: us-east-1
          repo: hello-world
          dockerfile: Dockerfile
          path: ./
          create-repo: true
          tag: ${CIRCLE_SHA1}
      - aws-eks/create-cluster:
          cluster-name: hello-world-app-deployment
          aws-region: us-east-1
          requires:
            - build-and-push-image
      - deploy-application:
          cluster-name: hello-world-app-deployment
          aws-region: us-east-1
          docker-image-name: "${AWS_ECR_URL}/hello-world:${CIRCLE_SHA1}"
          version-info: "${CIRCLE_SHA1}"
          requires:
            - aws-eks/create-cluster
      - test-application:
          name: test-application
          cluster-name: hello-world-app-deployment
          aws-region: us-east-1
          requires:
            - deploy-application